#include <stdio.h>
#include <stdlib.h>

// Definition of a Tree Node
typedef struct TreeNode {
    int value;
    struct TreeNode *left;
    struct TreeNode *right;
} TreeNode;

// Function to create a new Tree Node
TreeNode* createNode(int value) {
    TreeNode *newNode = (TreeNode *)malloc(sizeof(TreeNode));
    if (newNode == NULL) {
        fprintf(stderr, "Memory allocation failed\n");
        exit(EXIT_FAILURE);
    }
    newNode->value = value;
    newNode->left = NULL;
    newNode->right = NULL;
    return newNode;
}

// Function to insert a value into the BST
TreeNode* insert(TreeNode *root, int value) {
    if (root == NULL) {
        // Create a new node if the tree is empty or we've found the insertion point
        return createNode(value);
    }

    // Recur down the tree
    if (value < root->value) {
        root->left = insert(root->left, value);
    } else {
        root->right = insert(root->right, value);
    }

    return root;
}

// Function to perform in-order traversal of the BST
void inorderTraversal(TreeNode *root) {
    if (root != NULL) {
        inorderTraversal(root->left);
        printf("%d ", root->value);
        inorderTraversal(root->right);
    }
}

// Main function to demonstrate insertion and traversal
int main() {
    TreeNode *root = NULL;

    // Insert nodes into the BST
    root = insert(root, 50);
    insert(root, 30);
    insert(root, 20);
    insert(root, 40);
    insert(root, 70);
    insert(root, 60);
    insert(root, 80);

    // Perform in-order traversal of the BST
    printf("Inorder Traversal of the BST:\n");
    inorderTraversal(root);
    printf("\n");

    // Free memory and cleanup (not shown for simplicity)

    return 0;
}
